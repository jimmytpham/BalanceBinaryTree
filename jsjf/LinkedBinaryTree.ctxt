#BlueJ class context
comment0.target=LinkedBinaryTree
comment0.text=\r\n\ LinkedBinaryTree\ implements\ the\ BinaryTreeADT\ interface.\r\n\ \r\n\ \r\n\ @author\ Java\ Foundations\r\n\ @version\ 4.0\r\n
comment1.params=
comment1.target=LinkedBinaryTree()
comment1.text=\r\n\ Creates\ an\ empty\ binary\ tree.\r\n
comment10.params=
comment10.target=int\ size()
comment10.text=\r\n\ Returns\ the\ integer\ size\ of\ this\ tree.\r\n\r\n\ @return\ the\ integer\ size\ of\ the\ tree\r\n
comment11.params=
comment11.target=int\ getHeight()
comment11.text=\r\n\ Returns\ the\ height\ of\ this\ tree.\r\n\r\n\ @return\ the\ height\ of\ the\ tree\r\n
comment12.params=node
comment12.target=int\ height(BinaryTreeNode)
comment12.text=\r\n\ Returns\ the\ height\ of\ the\ specified\ node.\r\n\r\n\ @param\ node\ the\ node\ from\ which\ to\ calculate\ the\ height\r\n\ @return\ the\ height\ of\ the\ tree\r\n
comment13.params=targetElement
comment13.target=boolean\ contains(java.lang.Object)
comment13.text=\r\n\ Returns\ true\ if\ this\ tree\ contains\ an\ element\ that\ matches\ the\r\n\ specified\ target\ element\ and\ false\ otherwise.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ this\ tree\r\n\ @return\ true\ if\ the\ element\ in\ is\ this\ tree,\ false\ otherwise\r\n
comment14.params=targetElement
comment14.target=java.lang.Object\ find(java.lang.Object)
comment14.text=\r\n\ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ found\ in\ this\ binary\ tree.\ \ Throws\ a\ ElementNotFoundException\ if\r\n\ the\ specified\ target\ element\ is\ not\ found\ in\ the\ binary\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ this\ tree\r\n\ @return\ a\ reference\ to\ the\ specified\ target\r\n\ @throws\ ElementNotFoundException\ if\ the\ element\ is\ not\ in\ the\ tree\r\n
comment15.params=targetElement\ next
comment15.target=BinaryTreeNode\ findNode(java.lang.Object,\ BinaryTreeNode)
comment15.text=\r\n\ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ found\ in\ this\ binary\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ this\ tree\r\n\ @param\ next\ the\ element\ to\ begin\ searching\ from\r\n
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ binary\ tree\ showing\r\n\ the\ nodes\ in\ an\ inorder\ fashion.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ binary\ tree\r\n
comment17.params=
comment17.target=java.util.Iterator\ iterator()
comment17.text=\r\n\ Returns\ an\ iterator\ over\ the\ elements\ in\ this\ tree\ using\ the\ \r\n\ iteratorInOrder\ method\r\n\r\n\ @return\ an\ in\ order\ iterator\ over\ this\ binary\ tree\r\n
comment18.params=
comment18.target=java.util.Iterator\ iteratorInOrder()
comment18.text=\r\n\ Performs\ an\ inorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ an\r\n\ overloaded,\ recursive\ inorder\ method\ that\ starts\ with\r\n\ the\ root.\r\n\r\n\ @return\ an\ in\ order\ iterator\ over\ this\ binary\ tree\r\n
comment19.params=node\ tempList
comment19.target=void\ inOrder(BinaryTreeNode,\ ArrayUnorderedList)
comment19.text=\r\n\ Performs\ a\ recursive\ inorder\ traversal.\r\n\r\n\ @param\ node\ the\ node\ to\ be\ used\ as\ the\ root\ for\ this\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ for\ use\ in\ this\ traversal\r\n
comment2.params=element
comment2.target=LinkedBinaryTree(java.lang.Object)
comment2.text=\r\n\ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root.\r\n\r\n\ @param\ element\ the\ element\ that\ will\ become\ the\ root\ of\ the\ binary\ tree\r\n
comment20.params=
comment20.target=java.util.Iterator\ iteratorPreOrder()
comment20.text=\r\n\ Performs\ an\ preorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ \r\n\ an\ overloaded,\ recursive\ preorder\ method\ that\ starts\ with\r\n\ the\ root.\r\n\r\n\ @return\ a\ pre\ order\ iterator\ over\ this\ tree\r\n
comment21.params=node\ tempList
comment21.target=void\ preOrder(BinaryTreeNode,\ ArrayUnorderedList)
comment21.text=\r\n\ Performs\ a\ recursive\ preorder\ traversal.\r\n\r\n\ @param\ node\ the\ node\ to\ be\ used\ as\ the\ root\ for\ this\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ for\ use\ in\ this\ traversal\r\n
comment22.params=
comment22.target=java.util.Iterator\ iteratorPostOrder()
comment22.text=\r\n\ Performs\ an\ postorder\ traversal\ on\ this\ binary\ tree\ by\ calling\r\n\ an\ overloaded,\ recursive\ postorder\ method\ that\ starts\r\n\ with\ the\ root.\r\n\r\n\ @return\ a\ post\ order\ iterator\ over\ this\ tree\r\n
comment23.params=node\ tempList
comment23.target=void\ postOrder(BinaryTreeNode,\ ArrayUnorderedList)
comment23.text=\r\n\ Performs\ a\ recursive\ postorder\ traversal.\r\n\r\n\ @param\ node\ the\ node\ to\ be\ used\ as\ the\ root\ for\ this\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ for\ use\ in\ this\ traversal\r\n
comment24.params=
comment24.target=java.util.Iterator\ iteratorLevelOrder()
comment24.text=\r\n\ Performs\ a\ levelorder\ traversal\ on\ this\ binary\ tree,\ using\ a\r\n\ templist.\r\n\r\n\ @return\ a\ levelorder\ iterator\ over\ this\ binary\ tree\r\n
comment3.params=element\ left\ right
comment3.target=LinkedBinaryTree(java.lang.Object,\ LinkedBinaryTree,\ LinkedBinaryTree)
comment3.text=\r\n\ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root\ and\ the\ \r\n\ given\ trees\ as\ its\ left\ child\ and\ right\ child\r\n\r\n\ @param\ element\ the\ element\ that\ will\ become\ the\ root\ of\ the\ binary\ tree\r\n\ @param\ left\ the\ left\ subtree\ of\ this\ tree\r\n\ @param\ right\ the\ right\ subtree\ of\ this\ tree\r\n
comment4.params=
comment4.target=java.lang.Object\ getRootElement()
comment4.text=\r\n\ Returns\ a\ reference\ to\ the\ element\ at\ the\ root\r\n\r\n\ @return\ a\ reference\ to\ the\ specified\ target\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment5.params=
comment5.target=BinaryTreeNode\ getRootNode()
comment5.text=\r\n\ Returns\ a\ reference\ to\ the\ node\ at\ the\ root\r\n\r\n\ @return\ a\ reference\ to\ the\ specified\ node\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment6.params=
comment6.target=LinkedBinaryTree\ getLeft()
comment6.text=\r\n\ Returns\ the\ left\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\r\n\ @return\ a\ link\ to\ the\ left\ subtree\ of\ the\ tree\r\n
comment7.params=
comment7.target=LinkedBinaryTree\ getRight()
comment7.text=\r\n\ Returns\ the\ right\ subtree\ of\ the\ root\ of\ this\ tree.\r\n\r\n\ @return\ a\ link\ to\ the\ right\ subtree\ of\ the\ tree\r\n
comment8.params=
comment8.target=void\ removeAllElements()
comment8.text=\r\n\ Deletes\ all\ nodes\ from\ this\ binary\ tree.\r\n
comment9.params=
comment9.target=boolean\ isEmpty()
comment9.text=\r\n\ Returns\ true\ if\ this\ binary\ tree\ is\ empty\ and\ false\ otherwise.\r\n\r\n\ @return\ true\ if\ this\ binary\ tree\ is\ empty,\ false\ otherwise\r\n
numComments=25
