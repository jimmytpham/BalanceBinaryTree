#BlueJ class context
comment0.target=LinkedBinarySearchTree
comment0.text=\r\n\ LinkedBinarySearchTree\ implements\ the\ BinarySearchTreeADT\ interface\ \r\n\ with\ links.\r\n\ \r\n\ \r\n\ @author\ Java\ Foundations\r\n\ @version\ 4.0\r\n
comment1.params=
comment1.target=LinkedBinarySearchTree()
comment1.text=\r\n\ Creates\ an\ empty\ binary\ search\ tree.\r\n
comment10.params=node
comment10.target=BinaryTreeNode\ replacement(BinaryTreeNode)
comment10.text=\r\n\ Returns\ a\ reference\ to\ a\ node\ that\ will\ replace\ the\ one\r\n\ specified\ for\ removal.\ In\ the\ case\ where\ the\ removed\ node\ has\ \r\n\ two\ children,\ the\ inorder\ successor\ is\ used\ as\ its\ replacement.\r\n\r\n\ @param\ node\ the\ node\ to\ be\ removed\r\n\ @return\ a\ reference\ to\ the\ replacing\ node\r\n
comment11.params=targetElement
comment11.target=void\ removeAllOccurrences(java.lang.Object)
comment11.text=\r\n\ Removes\ elements\ that\ match\ the\ specified\ target\ element\ from\ \r\n\ the\ binary\ search\ tree.\ Throws\ a\ ElementNotFoundException\ if\ \r\n\ the\ specified\ target\ element\ is\ not\ found\ in\ this\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ binary\ search\ tree\r\n\ @throws\ ElementNotFoundException\ if\ the\ target\ element\ is\ not\ found\r\n
comment12.params=
comment12.target=java.lang.Object\ removeMin()
comment12.text=\r\n\ Removes\ the\ node\ with\ the\ least\ value\ from\ the\ binary\ search\r\n\ tree\ and\ returns\ a\ reference\ to\ its\ element.\ \ Throws\ an\r\n\ EmptyCollectionException\ if\ this\ tree\ is\ empty.\ \r\n\r\n\ @return\ a\ reference\ to\ the\ node\ with\ the\ least\ value\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment13.params=
comment13.target=java.lang.Object\ removeMax()
comment13.text=\r\n\ Removes\ the\ node\ with\ the\ highest\ value\ from\ the\ binary\r\n\ search\ tree\ and\ returns\ a\ reference\ to\ its\ element.\ Throws\ an\r\n\ EmptyCollectionException\ if\ this\ tree\ is\ empty.\ \r\n\r\n\ @return\ a\ reference\ to\ the\ node\ with\ the\ highest\ value\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment14.params=targetElement
comment14.target=java.lang.Object\ find(java.lang.Object)
comment14.text=\r\n\ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ found\ in\ the\ binary\ search\ tree.\ Throws\ a\ NoSuchElementException\ if\r\n\ the\ specified\ target\ element\ is\ not\ found\ in\ this\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ binary\ tree\r\n\ @throws\ ElementNotFoundException\ if\ the\ target\ element\ is\ not\ found\r\n
comment15.params=targetElement\ next
comment15.target=BinaryTreeNode\ findNode(java.lang.Object,\ BinaryTreeNode)
comment15.text=\r\n\ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ found\ in\ this\ tree.\ \ \r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ tree\r\n\ @param\ next\ the\ tree\ node\ to\ begin\ searching\ on\r\n
comment16.params=
comment16.target=java.lang.Object\ findMin()
comment16.text=\r\n\ Returns\ the\ element\ with\ the\ least\ value\ in\ the\ binary\ search\r\n\ tree.\ It\ does\ not\ remove\ the\ node\ from\ the\ binary\ search\ tree.\ \r\n\ Throws\ an\ EmptyCollectionException\ if\ this\ tree\ is\ empty.\r\n\r\n\ @return\ the\ element\ with\ the\ least\ value\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment17.params=
comment17.target=java.lang.Object\ findMax()
comment17.text=\r\n\ Returns\ the\ element\ with\ the\ highest\ value\ in\ the\ binary\r\n\ search\ tree.\ It\ does\ not\ remove\ the\ node\ from\ the\ binary\r\n\ search\ tree.\ Throws\ an\ EmptyCollectionException\ if\ this\ \r\n\ tree\ is\ empty.\r\n\r\n\ @return\ the\ element\ with\ the\ highest\ value\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment18.params=
comment18.target=void\ balanceTree()
comment19.params=elements
comment19.target=BinaryTreeNode\ recursiveBalance(java.util.List)
comment2.params=element
comment2.target=LinkedBinarySearchTree(java.lang.Object)
comment2.text=\r\n\ Creates\ a\ binary\ search\ with\ the\ specified\ element\ as\ its\ root.\r\n\r\n\ @param\ element\ the\ element\ that\ will\ be\ the\ root\ of\ the\ new\ binary\r\n\ \ \ \ \ \ \ \ search\ tree\r\n
comment3.params=element
comment3.target=void\ addElement(java.lang.Object)
comment3.text=\r\n\ Adds\ the\ specified\ object\ to\ the\ binary\ search\ tree\ in\ the\r\n\ appropriate\ position\ according\ to\ its\ natural\ order.\ \ Note\ that\r\n\ equal\ elements\ are\ added\ to\ the\ right.\r\n\r\n\ @param\ element\ the\ element\ to\ be\ added\ to\ the\ binary\ search\ tree\r\n
comment4.params=element\ node
comment4.target=void\ addElement(java.lang.Object,\ BinaryTreeNode)
comment4.text=\r\n\ Adds\ the\ specified\ object\ to\ the\ binary\ search\ tree\ in\ the\r\n\ appropriate\ position\ according\ to\ its\ natural\ order.\ \ Note\ that\r\n\ equal\ elements\ are\ added\ to\ the\ right.\r\n\r\n\ @param\ element\ the\ element\ to\ be\ added\ to\ the\ binary\ search\ tree\r\n
comment5.params=
comment5.target=java.lang.Object\ getRootElement()
comment5.text=\r\n\ Returns\ a\ reference\ to\ the\ element\ at\ the\ root\r\n\r\n\ @return\ a\ reference\ to\ the\ specified\ target\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment6.params=
comment6.target=int\ getHeight()
comment6.text=\r\n\ Returns\ the\ height\ of\ this\ tree.\r\n\r\n\ @return\ the\ height\ of\ the\ tree\r\n
comment7.params=targetElement
comment7.target=boolean\ contains(java.lang.Object)
comment7.text=\r\n\ Returns\ true\ if\ the\ specified\ target\ element\ is\r\n\ found\ in\ the\ binary\ search\ tree.\ Returns\ false\ otherwise.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ binary\ tree\r\n
comment8.params=targetElement
comment8.target=java.lang.Object\ removeElement(java.lang.Object)
comment8.text=\r\n\ Removes\ the\ first\ element\ that\ matches\ the\ specified\ target\r\n\ element\ from\ the\ binary\ search\ tree\ and\ returns\ a\ reference\ to\r\n\ it.\ \ Throws\ a\ ElementNotFoundException\ if\ the\ specified\ target\r\n\ element\ is\ not\ found\ in\ the\ binary\ search\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ binary\ search\ tree\r\n\ @throws\ ElementNotFoundException\ if\ the\ target\ element\ is\ not\ found\r\n
comment9.params=targetElement\ node\ parent
comment9.target=java.lang.Object\ removeElement(java.lang.Object,\ BinaryTreeNode,\ BinaryTreeNode)
comment9.text=\r\n\ Removes\ the\ first\ element\ that\ matches\ the\ specified\ target\r\n\ element\ from\ the\ binary\ search\ tree\ and\ returns\ a\ reference\ to\r\n\ it.\ \ Throws\ a\ ElementNotFoundException\ if\ the\ specified\ target\r\n\ element\ is\ not\ found\ in\ the\ binary\ search\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ binary\ search\ tree\r\n\ @param\ node\ the\ node\ from\ which\ to\ search\r\n\ @param\ parent\ the\ parent\ of\ the\ node\ from\ which\ to\ search\r\n\ @throws\ ElementNotFoundException\ if\ the\ target\ element\ is\ not\ found\r\n
numComments=20
